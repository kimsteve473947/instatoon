generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 사용자 모델
model User {
  id                String         @id @default(cuid())
  supabaseId        String         @unique
  email             String         @unique
  name              String?
  imageUrl          String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // 구독 정보
  subscription      Subscription?
  
  // 관계
  projects          Project[]
  characters        Character[]
  generations       Generation[]
  transactions      Transaction[]
  referralCode      String         @unique @default(cuid())
  referredBy        String?
  referralRewards   ReferralReward[] @relation("referrer")
  referredRewards   ReferralReward[] @relation("referred")
  
  @@index([supabaseId])
  @@index([email])
}

// 구독 모델
model Subscription {
  id                String         @id @default(cuid())
  userId            String         @unique
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 플랜 정보
  plan              SubscriptionPlan @default(FREE)
  tokensTotal       Int            @default(0)
  tokensUsed        Int            @default(0)
  maxCharacters     Int            @default(1)
  maxProjects       Int            @default(3)
  
  // 결제 정보
  tossCustomerId    String?
  tossSubscriptionId String?
  
  // 구독 기간
  currentPeriodStart DateTime      @default(now())
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean       @default(false)
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  @@index([userId])
}

// 구독 플랜 enum
enum SubscriptionPlan {
  FREE        // 무료: 10토큰, 캐릭터 1개, 프로젝트 3개
  PERSONAL    // 개인: 100토큰, 캐릭터 3개, 프로젝트 5개
  HEAVY       // 헤비유저: 500토큰, 캐릭터 5개, 프로젝트 20개
  ENTERPRISE  // 기업: 무제한 토큰, 캐릭터 10개, 무제한 프로젝트
}

// 캐릭터 모델
model Character {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name              String
  description       String         @db.Text
  styleGuide        String?        @db.Text
  
  // 레퍼런스 이미지들
  referenceImages   Json           // URL 배열
  thumbnailUrl      String?
  
  isPublic          Boolean        @default(false)
  isFavorite        Boolean        @default(false)
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // 관계
  generations       Generation[]
  projects          ProjectCharacter[]
  
  @@index([userId])
}

// 프로젝트 모델
model Project {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title             String
  description       String?        @db.Text
  thumbnailUrl      String?
  
  status            ProjectStatus  @default(DRAFT)
  isPublic          Boolean        @default(false)
  
  // 메타데이터
  metadata          Json?          // 추가 설정 정보
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  publishedAt       DateTime?
  
  // 관계
  panels            Panel[]
  generations       Generation[]
  characters        ProjectCharacter[]
  
  @@index([userId])
  @@index([status])
}

// 프로젝트 상태 enum
enum ProjectStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  PUBLISHED
  ARCHIVED
}

// 프로젝트-캐릭터 관계 테이블
model ProjectCharacter {
  id                String         @id @default(cuid())
  projectId         String
  project           Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  characterId       String
  character         Character      @relation(fields: [characterId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime       @default(now())
  
  @@unique([projectId, characterId])
  @@index([projectId])
  @@index([characterId])
}

// 패널 모델 (웹툰의 각 컷)
model Panel {
  id                String         @id @default(cuid())
  projectId         String
  project           Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  order             Int            // 패널 순서
  prompt            String         @db.Text
  imageUrl          String?
  
  // 편집 데이터 (말풍선, 텍스트 등)
  editData          Json?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // 관계
  generation        Generation?
  
  @@unique([projectId, order])
  @@index([projectId])
}

// AI 생성 기록
model Generation {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId         String?
  project           Project?       @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  panelId           String?        @unique
  panel             Panel?         @relation(fields: [panelId], references: [id], onDelete: SetNull)
  
  characterId       String?
  character         Character?     @relation(fields: [characterId], references: [id], onDelete: SetNull)
  
  // 생성 정보
  prompt            String         @db.Text
  negativePrompt    String?        @db.Text
  
  // 결과
  imageUrl          String
  thumbnailUrl      String?
  
  // 메타데이터
  model             String         @default("gemini-2-5-flash-image-preview")
  tokensUsed        Int            @default(2)
  generationTime    Int?           // 밀리초
  metadata          Json?
  
  createdAt         DateTime       @default(now())
  
  @@index([userId])
  @@index([projectId])
}

// 거래 내역
model Transaction {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type              TransactionType
  amount            Int            // 원 단위
  tokens            Int?           // 토큰 수량
  
  // 결제 정보
  tossPaymentKey    String?
  tossOrderId       String?
  
  status            TransactionStatus @default(PENDING)
  description       String?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  @@index([userId])
  @@index([status])
}

// 거래 유형 enum
enum TransactionType {
  SUBSCRIPTION      // 구독 결제
  TOKEN_PURCHASE    // 토큰 구매
  REFUND           // 환불
  REFERRAL_REWARD  // 추천 보상
}

// 거래 상태 enum
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// 추천인 보상 기록
model ReferralReward {
  id                String         @id @default(cuid())
  
  referrerId        String
  referrer          User           @relation("referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  
  referredId        String
  referred          User           @relation("referred", fields: [referredId], references: [id], onDelete: Cascade)
  
  tokensRewarded    Int            @default(50)
  
  createdAt         DateTime       @default(now())
  
  @@unique([referrerId, referredId])
  @@index([referrerId])
  @@index([referredId])
}